@page "/tabledata"
@using UITable3.Shared
@inject HttpClient Http

@if (tasks == null)
{
    <RadzenButton Click=@(args => GetData()) Text="Load Data" ButtonStyle="ButtonStyle.Light" />
}
else
{
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add New Task" Click="@InsertRow" Disabled=@(disabledBtn)  ButtonStyle="ButtonStyle.Secondary"/>
    <RadzenDataGrid @ref="tasksGrid" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="10" AllowSorting="true"
                    Data="@tasks" Style="padding: 0px" ColumnWidth="120px" TItem="TableData" EditMode="DataGridEditMode.Single">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="TableData" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @(tasks.IndexOf(data) + 1)
                </Template>
                <EditTemplate Context="row">
                    <RadzenTextBox  Value=@(selectIndex(row).ToString())  Disabled="true"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ActivityName" Title="Name"  >
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.ActivityName" Style="width:100%; display:block;" Name="Name" AutoComplete="true"   />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ActivityDescription" Title="Description" >
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.ActivityDescription" Style="width:100%; display:block;" Name="Description"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ActivityContext" Title="Context" >
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.ActivityContext" Style="width:100%; display:block;" Name="Context"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="90px" TItem="TableData" Property="Status" Title="Status" TextAlign="TextAlign.Center" 
                LogicalFilterOperator="LogicalFilterOperator.Or" FilterValue="@(status)" FilterOperator="FilterOperator.Contains"  Type="typeof(IEnumerable<string>)"  >
                <Template Context="data">
                    <RadzenButton ButtonStyle=@(StatusBtnStyle(data.Status)) Style="width: 80px;
    height: 21px;
    border-radius: 6px;
    font-size: 12px;
    text-align: center;
    padding: 0px;" class="status-btn"  Text="@data.Status" />
                </Template>
                <EditTemplate Context="row">
                   <RadzenDropDown @bind-Value="row.Status" Data="@statuses" Style="width:100%; display: block;" />
                </EditTemplate>
                <FilterTemplate>
                    <RadzenDropDown @bind-Value=@(status) Style="width:100%; margin: 8px 4px;"
                         Change=@OnSelectedStatus Data="@(statuses)" AllowClear="true" Multiple="true" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ServiceUserId" Title="Assigned To" >
                <Template Context="data">
                    <RadzenImage Path=@(data.Photo) style="width: 40px; height: 40px; border-radius: 20px; margin-left: 40px" />
                    <h5 class="mt-1 mb-0" style="font-size: 0.8em; text-align: center;">@data.ActivityName</h5>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="CreatedDate" Title="Start Date" FormatString="{0:d}" >
                <EditTemplate Context="row">
                    <RadzenDatePicker @bind-Value="row.CreatedDate" Style="width:100%;" Name="Start Date"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="DueDate" Title="Due Date" FormatString="{0:d}" >
                <EditTemplate Context="row">
                    <RadzenDatePicker @bind-Value="row.DueDate" Style="width:100%;" Name="Due Date"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="90px" TItem="TableData" Property="Priority" Title="Priority" TextAlign="TextAlign.Center"
             LogicalFilterOperator="LogicalFilterOperator.Or" FilterValue="@(priority)" FilterOperator="FilterOperator.Contains"  Type="typeof(IEnumerable<string>)">
                <Template Context="data">
                    <RadzenButton ButtonStyle=@(PriorityBtnStyle(data.Priority)) Style="width: 80px;
    height: 21px;
    border-radius: 6px;
    font-size: 12px;
    text-align: center;
    padding: 0px;
position:relative;" Class="Status-btn"  Text="@data.Priority" />
                </Template>
                <EditTemplate Context="row">
                   <RadzenDropDown @bind-Value="row.Priority" Data="@priorities" Style="width:100%; display: block;" />
                </EditTemplate>
                <FilterTemplate>
                    <RadzenDropDown @bind-Value=@(priority) Style="width:100%; margin: 8px 4px;"
                         Change=@OnSelectedStatus Data="@(priorities)" AllowClear="true" Multiple="true" />
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="WorkFlowStep" Title="Process Status">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Class="m-1" Text="@data.WorkFlowStep" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="Data1" Title="Data1" Visible="false">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.Data1" Style="width:100%; display:block;" Name="data1"  />
                </EditTemplate>
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn TItem="TableData" Property="Data2" Title="Data2" Visible="false">
                <EditTemplate Context="row">
                    <RadzenTextBox @bind-Value="row.Data2" Style="width:100%; display:block;" Name="data2"  />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="110px" TItem="TableData" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="row">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(row))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="row">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Secondary" Class="m-1" Click="@((args) => SaveRow(row))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(row))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@code {
    RadzenDataGrid<TableData> tasksGrid;
    IList<TableData> tasks;
    TableData? newRow;
    List<string> statuses;
    List<string> priorities;
    IEnumerable<string> status;
    IEnumerable<string> priority;
    bool disabledBtn = false;

    protected override void OnInitialized()
    {
        //tasks = Http.GetFromJsonAsync<TableData[]>("TableData");
    }
    private async Task GetData()
    {
        tasks = await Http.GetFromJsonAsync<TableData[]>("TableData");
        tasks = tasks.ToList();
        statuses = Enum.GetNames(typeof(ActivityStatus)).ToList();
        priorities = Enum.GetNames(typeof(PriorityStates)).ToList(); 
    }
    private ButtonStyle StatusBtnStyle(string status)
    {
        switch (status)
        {
            case "Draft":
                return ButtonStyle.Secondary;

            case "Active":
                return ButtonStyle.Info;

            case "Closed":
                return ButtonStyle.Success;

            case "Cancelled":
                return ButtonStyle.Warning;

            case "Deleted":
                return ButtonStyle.Danger;

            default:
                return ButtonStyle.Danger;
        }
    }
    private ButtonStyle PriorityBtnStyle(string priority)
    {
        switch (priority)
        {
            case "Critical":
                return ButtonStyle.Danger;

            case "High":
                return ButtonStyle.Warning;

            case "Medium":
                return ButtonStyle.Success;

            case "Low":
                return ButtonStyle.Info;

            default:
                return ButtonStyle.Danger;
        }
    }

    private void OnSelectedStatus(object value)
    {
        if (status != null && !status.Any())
        {
            status = null;  
        }
    }

    private void OnSelectedPriority(object value)
    {
        if (priority != null && !priority.Any())
        {
            priority = null;  
        }
    }

    private async Task InsertRow()
    {
        disabledBtn = true;
        newRow = new TableData();
        newRow.ActivityName = string.Empty;
        newRow.Photo = tasks[0].Photo;
        tasks.Add(newRow);
        await tasksGrid.InsertRow(newRow);
    }

    private async Task SaveRow(TableData row)
    {
        await tasksGrid.UpdateRow(row);
        disabledBtn = false;
    }

    private async Task EditRow(TableData row)
    {
        disabledBtn = true;
        await tasksGrid.EditRow(row);
    }

    private void CancelEdit(TableData row)
    {
        tasksGrid.CancelEditRow(row);
        disabledBtn = false;
    }
    private int selectIndex(TableData row)
    {
        return tasks.Contains(row) ? tasks.IndexOf(row) + 1 : tasks.Count + 1;
    }
     /*async Task ShowInlineDialog()
    {
     var result = await DialogService.OpenAsync("Simple Dialog", ds =>
        @<div>
                <div class="col">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />
                    <RadzenButton Text="Refresh" Click="() => ds.Refresh() " ButtonStyle="ButtonStyle.Light"  Class="mr-1 float-right" />          
                </div>
        </div>);
    
    }*/



//ContextMenu=@(args => ShowContextMenuWithItems(args))
}

