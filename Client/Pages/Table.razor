@page "/tabledata"
@using UITable3.Shared
@inject HttpClient Http


@if (tasks == null)
{
    <RadzenButton Click=@(args => GetData()) Text="Load Data" ButtonStyle="ButtonStyle.Light" />
}
else
{
    <RadzenDataGrid @ref="tasksGrid" AllowFiltering="true" FilterMode="FilterMode.Simple" AllowPaging="true" PageSize="10" AllowSorting="true"
                    Data="@tasks" ColumnWidth="140px" TItem="TableData">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="TableData" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @(tasks.IndexOf(data) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ActivityName" Title="Name" />
            <RadzenDataGridColumn TItem="TableData" Property="ActivityDescription" Title="Description" />
            <RadzenDataGridColumn TItem="TableData" Property="ActivityContext" Title="Context" />
            <RadzenDataGridColumn Width="120px" TItem="TableData" Property="Status" Title="Status">
                <Template Context="data">
                    <RadzenButton ButtonStyle=@(StatusBtnStyle(data.Status.ToString())) Class="Status-btn"  Text="@data.Status" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="ServiceUserId" Title="Assigned To">
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" style="width: 30px; height: 40px; border-radius: 8px; float: left;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="CreatedDate" Title="Start Date" FormatString="{0:d}" />
            <RadzenDataGridColumn TItem="TableData" Property="DueDate" Title="Due Date" FormatString="{0:d}" />
            <RadzenDataGridColumn Width="160px" TItem="TableData" Property="Priority" Title="Priority">
                <Template Context="data">
                    @switch (data.Priority.ToString())
                    {
                        case "Critical":
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Class="m-1" Style="width: 70px; height: 25px; border-radius: 6px;" Text="Critical" />
                            break;

                        case "High":
                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Class="m-1" Style="width: 70px; height: 25px; border-radius: 6px;" Text="High" />
                            break;

                        case "Medium":
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Class="m-1" Style="width: 70px; height: 25px; border-radius: 6px;" Text="Medium" />
                            break;

                        case "Low":
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Class="m-1" Style="width: 70px; height: 25px; border-radius: 6px;" Text="Low" />
                            break;
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="160px" TItem="TableData" Property="WorkFlowStep" Title="Process Status">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Class="m-1" Text="@data.WorkFlowStep" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TableData" Property="Data1" Title="Data1" />
            <RadzenDataGridColumn TItem="TableData" Property="Data2" Title="Data2" />
        </Columns>
    </RadzenDataGrid>
}
@code {
    RadzenDataGrid<TableData> tasksGrid;
    IList<TableData> tasks;

    protected override void OnInitialized()
    {
        //tasks = Http.GetFromJsonAsync<TableData[]>("TableData");
    }
    private async Task GetData()
    {
        tasks = await Http.GetFromJsonAsync<TableData[]>("TableData");
    }
    private ButtonStyle StatusBtnStyle(string status)
    {
        switch (status)
        {
            case "Critical":
                return ButtonStyle.Danger;
                break;

            case "High":
                return ButtonStyle.Warning;
                break;

            case "Medium":
                return ButtonStyle.Success;
                break;

            case "Low":
                return ButtonStyle.Info;
                break;

            default:
                return ButtonStyle.Info;
                break;
        }
    }
    /*private async Task GetImage(string imagePath)
    {
        byte[] byteImage = await Http.GetByteArrayAsync("image");
        using (var ms = new MemoryStream(byteArrayIn))
        {
            return Image.FromStream(ms);
        }
    }*/

}